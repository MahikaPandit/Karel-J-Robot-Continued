import kareltherobot.*;
import java.awt.Color;

/**
 * robot goes through a maze(w/ diff size hurdles)
 * 
 * @Mahika Pandit
 *
 * @6-17-23
 */

// This code is from Chapter 5, it is one possible way to solve the problem, WITHOUT variables, 
// ** this code extends Racer, another code in this repository
// The purpose of this code is to either be an answer key if one would like to check their work or if someone would like to see how to go about the problem
// Have fun :)

public class SteepleChaser5_6 extends Racer
{
    /**
     * Creates a SteepleChaser5_6 object.
     *
     * @param street     specifies the vertical position on the grid
     *                   of this robot.
     * @param avenue     specifies the horizontal position on the grid
     *                   of this robot.
     * @param direction  specifies the direction of this robot.
     * @param beepers    specifies this robot's number of beepers.
     */
    public SteepleChaser5_6 (int street, int avenue, 
           Direction direction, int beepers)
    {
        super(street, avenue, direction, beepers);
    }
    
    /* SteepleChaser5_6 methods: */
    
    /**
     * robot goes down from hurdle
     * 
     * precondition: robot at end of hurdle, on top
     * postcondition: robot at end of hurdle
     */
    @Override
    public void jumpUp()
    {
        turnLeft();
        move();
        if(!rightIsClear())
        {
            move();
        }
        if(!rightIsClear())
        {
            move();
        }
        turnRight();
    }
    
    /**
     * robot checks if hurdle is over
     * 
     * precondition: robot going up hurdle
     * postcondition: robot at top of hurdle ready to go over or robot climbing hurdle
     */
    public boolean rightIsClear()
    {
        turnRight();
        if(frontIsClear())
        {
            turnLeft();
            return true;
        }
        turnLeft();
        return false;
    }
    
    /**
     * robot goes down from hurdle
     * 
     * precondition: robot at end of hurdle, on top
     * postcondition: robot at end of hurdle
     */
    @Override
    public void glideDown()
    {
        turnRight();
        move();
        if(frontIsClear())
        {
            move();
            if(frontIsClear())
            {
               move();
            }
            turnLeft();
        }
        else
        {
            turnLeft();
        }
        
    }

}
